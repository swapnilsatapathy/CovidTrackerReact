{"version":3,"sources":["components/Landing.js","App.js","serviceWorker.js","index.js","images/logo.png"],"names":["Landing","props","handleChange","selectedOption","setState","fetch","value","then","res","json","confirmed","cases","active","recovered","deaths","critical","casesToday","todayCases","deathsToday","todayDeaths","casesPerMillion","casesPerOneMillion","deathsPerMillion","deathsPerOneMillion","totalTests","testsPerMillion","testsPerOneMillion","state","countries","label","countriesData","map","obj","push","country","this","options","tempObj","activePer","toFixed","recoveredPer","deathsPer","countryName","className","src","Logo","alt","class","style","backgroundColor","onChange","fontWeight","start","end","duration","separator","Date","toDateString","data","labels","datasets","legend","display","title","text","fontColor","scales","yAxes","ticks","beginAtZero","xAxes","textAlign","color","colspan","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uTAoUeA,E,kDA5TX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmBVC,aAAe,SAAAC,GACX,EAAKC,SAAS,CACVD,eAAgBA,IAEpBE,MAAM,sDAAD,OAAuDF,EAAeG,QACtEC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACE,GACH,EAAKL,SAAS,CACVM,UAAWD,EAAKE,MAChBC,OAAQH,EAAKG,OACbC,UAAWJ,EAAKI,UAChBC,OAAQL,EAAKK,OACbC,SAAUN,EAAKM,SACfC,WAAYP,EAAKQ,WACjBC,YAAaT,EAAKU,YAClBC,gBAAiBX,EAAKY,mBACtBC,iBAAkBb,EAAKc,oBACvBC,WAAYf,EAAKe,WACjBC,gBAAiBhB,EAAKiB,yBAnClC,EAAKC,MAAQ,CACTC,UAAW,GACXlB,UAAW,EACXE,OAAQ,EACRC,UAAW,EACXC,OAAQ,EACRX,eAAgB,CAACG,MAAO,QAASuB,MAAO,SACxCd,SAAU,EACVC,WAAY,EACZE,YAAa,EACbE,gBAAiB,EACjBE,iBAAkB,EAClBE,WAAY,EACZC,gBAAiB,GAhBN,E,gMA4CXK,EAAgB,GAChBF,EAAY,G,SACVvB,MAAM,sDACPE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACE,GACHqB,EAAgBrB,K,uBAElBJ,MAAM,4DACPE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACE,GACH,EAAKL,SAAS,CACVM,UAAWD,EAAKE,MAChBC,OAAQH,EAAKG,OACbC,UAAWJ,EAAKI,UAChBC,OAAQL,EAAKK,OACbC,SAAUN,EAAKM,SACfC,WAAYP,EAAKQ,WACjBC,YAAaT,EAAKU,YAClBC,gBAAiBX,EAAKY,mBACtBC,iBAAkBb,EAAKc,oBACvBC,WAAYf,EAAKe,WACjBC,gBAAiBhB,EAAKiB,wB,OAGlCI,EAAcC,KAAI,SAACC,GACfJ,EAAUK,KAAKD,EAAIE,YAEvBC,KAAK/B,SAAS,CACVwB,UAAWA,I,qIAKT,IAAD,EAC0KO,KAAKR,MAA5KxB,EADH,EACGA,eAAgByB,EADnB,EACmBA,UAAWlB,EAD9B,EAC8BA,UAAWE,EADzC,EACyCA,OAAQC,EADjD,EACiDA,UAAWC,EAD5D,EAC4DA,OAAQC,EADpE,EACoEA,SAAUC,EAD9E,EAC8EA,WAAYE,EAD1F,EAC0FA,YAAaE,EADvG,EACuGA,gBAAiBE,EADxH,EACwHA,iBAAkBE,EAD1I,EAC0IA,WAAYC,EADtJ,EACsJA,gBACvJW,EAAU,GACdR,EAAUG,KAAI,SAACG,GACX,IAAIG,EAAU,GACdA,EAAQ/B,MAAQ4B,EAChBG,EAAQR,MAAQK,EAChBE,EAAQH,KAAKI,MAEjB,IAAIC,GAAc1B,EAASF,EAAa,KAAK6B,QAAQ,GACjDC,GAAiB3B,EAAYH,EAAa,KAAK6B,QAAQ,GACvDE,GAAc3B,EAASJ,EAAa,KAAK6B,QAAQ,GACjDG,EAAcvC,EAAeG,MACjC,OACI,yBAAKqC,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKC,IAAKC,IAAMF,UAAU,OAAOG,IAAI,UAEzC,yBAAKH,UAAU,kBACX,yBAAKA,UAAU,UACX,yBAAKI,MAAM,OAAOC,MAAO,CAAEC,gBAAiB,YACxC,yBAAKF,MAAM,aACP,kBAAE,IAAF,CACIzC,MAAOH,EACP+C,SAAUf,KAAKjC,aACfkC,QAASA,OAKzB,yBAAKO,UAAU,eACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,aACX,wBAAII,MAAM,kCAAV,aACA,wBAAIC,MAAO,CAAEG,WAAY,WAAY,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAK3C,EAAW4C,SAAU,EAAGC,UAAU,OAC/F,wBAAIZ,UAAU,wBAAuB,IAAIa,MAAOC,kBAGxD,yBAAKd,UAAU,oBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,kCAAd,UACA,wBAAIK,MAAO,CAAEG,WAAY,WAAY,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKzC,EAAQ0C,SAAU,EAAGC,UAAU,OAC5F,wBAAIZ,UAAU,wBAAuB,IAAIa,MAAOC,kBAGxD,yBAAKd,UAAU,uBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,kCAAd,aACA,wBAAIK,MAAO,CAAEG,WAAY,WAAY,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKxC,EAAWyC,SAAU,EAAGC,UAAU,OAC/F,wBAAIZ,UAAU,wBAAuB,IAAIa,MAAOC,kBAGxD,yBAAKd,UAAU,oBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,kCAAd,YACA,wBAAIK,MAAO,CAAEG,WAAY,WAAY,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvC,EAAQwC,SAAU,EAAGC,UAAU,OAC5F,wBAAIZ,UAAU,wBAAuB,IAAIa,MAAOC,oBAKhE,yBAAKd,UAAU,eACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEP,kBAAC,gBAAD,CACIe,KAAM,CACFC,OAAQ,CAAC,SAAU,YAAa,YAChCC,SAAU,CACN,CACI/B,MAAO,iBACPoB,gBAAiB,CAAC,yBAA0B,uBAAwB,yBACpES,KAAM,CAACpB,EAAWE,EAAcC,MAK5CL,QAAS,CACLyB,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsBtB,EAAtB,QAAyCuB,UAAW,SAChFC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,EACbJ,UAAW,WAGnBK,MAAO,CAAC,CACJF,MAAO,CACHH,UAAW,gBAQvC,yBAAKtB,UAAU,qBAAqBK,MAAO,CAAEuB,UAAW,UAAWC,MAAO,UACtE,gCACA,2BAAO7B,UAAU,gBACb,4BACI,4BACI,0DAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASS,MAAO,EAAGC,IAAK3C,EAAW4C,SAAU,EAAGC,UAAU,QAGlE,4BACI,4BACI,iDAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASH,MAAO,EAAGC,IAAKzC,EAAQ0C,SAAU,EAAGC,UAAU,QAG/D,4BACI,4BACI,oDAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASH,MAAO,EAAGC,IAAK3C,EAAW4C,SAAU,EAAGC,UAAU,QAGlE,4BACI,4BACI,mDAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASH,MAAO,EAAGC,IAAKtC,EAAUuC,SAAU,EAAGC,UAAU,QAGjE,4BACI,4BACI,0DAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASH,MAAO,EAAGC,IAAKrC,EAAYsC,SAAU,EAAGC,UAAU,QAGnE,4BACI,4BACI,kDAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASH,MAAO,EAAGC,IAAKjC,EAAiBkC,SAAU,EAAGC,UAAU,QAGxE,wBAAIR,MAAM,aACN,wBAAI0B,QAAQ,OAEhB,4BACI,4BACI,iDAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASrB,MAAO,EAAGC,IAAKvC,EAAQwC,SAAU,EAAGC,UAAU,QAG/D,4BACI,4BACI,iDAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASH,MAAO,EAAGC,IAAKnC,EAAaoC,SAAU,EAAGC,UAAU,QAGpE,4BACI,4BACI,mDAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASH,MAAO,EAAGC,IAAK/B,EAAkBgC,SAAU,EAAGC,UAAU,QAGzE,wBAAIR,MAAM,aACN,wBAAI0B,QAAQ,OAEhB,4BACI,4BACI,gDAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASrB,MAAO,EAAGC,IAAK7B,EAAY8B,SAAU,EAAGC,UAAU,QAGnE,4BACI,4BACI,kDAEJ,4BACI,8DAEJ,4BACI,kBAAC,IAAD,CAASH,MAAO,EAAGC,IAAK5B,EAAiB6B,SAAU,EAAGC,UAAU,mB,GA/StFmB,a,OCKPC,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjF,MAAK,SAAAkF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.f528f868.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport '../landing.css'\nimport Logo from '../images/logo.png'\nimport Select from 'react-select';\nimport CountUp from 'react-countup';\nimport { Bar, HorizontalBar } from 'react-chartjs-2'\n\nclass Landing extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            countries: [],\n            confirmed: 0,\n            active: 0,\n            recovered: 0,\n            deaths: 0,\n            selectedOption: {value: \"World\", label: \"World\"},\n            critical: 0,\n            casesToday: 0,\n            deathsToday: 0,\n            casesPerMillion: 0,\n            deathsPerMillion: 0,\n            totalTests: 0,\n            testsPerMillion: 0\n        }\n    }\n\n    handleChange = selectedOption => {\n        this.setState({\n            selectedOption: selectedOption\n        })\n        fetch(`https://coronavirus-19-api.herokuapp.com/countries/${selectedOption.value}`)\n            .then(res => res.json())\n            .then((json) => {\n                this.setState({\n                    confirmed: json.cases,\n                    active: json.active,\n                    recovered: json.recovered,\n                    deaths: json.deaths,\n                    critical: json.critical,\n                    casesToday: json.todayCases,\n                    deathsToday: json.todayDeaths,\n                    casesPerMillion: json.casesPerOneMillion,\n                    deathsPerMillion: json.deathsPerOneMillion,\n                    totalTests: json.totalTests,\n                    testsPerMillion: json.testsPerOneMillion\n                })\n            })\n    };\n\n    async componentDidMount() {\n        var countriesData = []\n        var countries = []\n        await fetch('https://coronavirus-19-api.herokuapp.com/countries')\n            .then(res => res.json())\n            .then((json) => {\n                countriesData = json\n            })\n        await fetch('https://coronavirus-19-api.herokuapp.com/countries/World')\n            .then(res => res.json())\n            .then((json) => {\n                this.setState({\n                    confirmed: json.cases,\n                    active: json.active,\n                    recovered: json.recovered,\n                    deaths: json.deaths,\n                    critical: json.critical,\n                    casesToday: json.todayCases,\n                    deathsToday: json.todayDeaths,\n                    casesPerMillion: json.casesPerOneMillion,\n                    deathsPerMillion: json.deathsPerOneMillion,\n                    totalTests: json.totalTests,\n                    testsPerMillion: json.testsPerOneMillion\n                })\n            })\n        countriesData.map((obj) => {\n            countries.push(obj.country)\n        })\n        this.setState({\n            countries: countries\n        })\n    }\n\n\n    render() {\n        const { selectedOption, countries, confirmed, active, recovered, deaths, critical, casesToday, deathsToday, casesPerMillion, deathsPerMillion, totalTests, testsPerMillion } = this.state;\n        var options = []\n        countries.map((country) => {\n            var tempObj = {}\n            tempObj.value = country\n            tempObj.label = country\n            options.push(tempObj)\n        })\n        var activePer = ((active / confirmed) * 100).toFixed(2)\n        var recoveredPer = ((recovered / confirmed) * 100).toFixed(2)\n        var deathsPer = ((deaths / confirmed) * 100).toFixed(2)\n        var countryName = selectedOption.value\n        return (\n            <div className=\"body\">\n                <div className=\"container\">\n                    <img src={Logo} className=\"logo\" alt=\"logo\" />\n                </div>\n                <div className=\"container mt-4\">\n                    <div className=\"col-12\">\n                        <div class=\"card\" style={{ backgroundColor: \"#100e2b\" }}>\n                            <div class=\"card-body\">\n                                < Select\n                                    value={selectedOption}\n                                    onChange={this.handleChange}\n                                    options={options}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-12 mt-4\">\n                        <div className=\"card-deck\">\n                            <div className=\"card card-confirmed\">\n                                <div className=\"card-body\">\n                                    <h6 class=\"card-title card-modified-title\">Confirmed</h6>\n                                    <h3 style={{ fontWeight: \"bolder\" }}><CountUp start={0} end={confirmed} duration={2} separator=\",\" /></h3>\n                                    <h6 className=\"card-modified-title\">{new Date().toDateString()}</h6>\n                                </div>\n                            </div>\n                            <div className=\"card card-active\">\n                                <div className=\"card-body\">\n                                    <h6 className=\"card-title card-modified-title\">Active</h6>\n                                    <h3 style={{ fontWeight: \"bolder\" }}><CountUp start={0} end={active} duration={2} separator=\",\" /></h3>\n                                    <h6 className=\"card-modified-title\">{new Date().toDateString()}</h6>\n                                </div>\n                            </div>\n                            <div className=\"card card-recovered\">\n                                <div className=\"card-body\">\n                                    <h6 className=\"card-title card-modified-title\">Recovered</h6>\n                                    <h3 style={{ fontWeight: \"bolder\" }}><CountUp start={0} end={recovered} duration={2} separator=\",\" /></h3>\n                                    <h6 className=\"card-modified-title\">{new Date().toDateString()}</h6>\n                                </div>\n                            </div>\n                            <div className=\"card card-deaths\">\n                                <div className=\"card-body\">\n                                    <h6 className=\"card-title card-modified-title\">Deceased</h6>\n                                    <h3 style={{ fontWeight: \"bolder\" }}><CountUp start={0} end={deaths} duration={2} separator=\",\" /></h3>\n                                    <h6 className=\"card-modified-title\">{new Date().toDateString()}</h6>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-12 mt-5\">\n                        <div className=\"row\">\n                            <div className=\"col-md-7 col-sm-12\">\n                                {\n                                    <HorizontalBar\n                                        data={{\n                                            labels: ['Active', 'Recovered', 'Deceased'],\n                                            datasets: [\n                                                {\n                                                    label: 'Percentage(%) ',\n                                                    backgroundColor: ['rgba(255, 183, 0, 0.6)', 'rgba(0, 255, 0, 0.5)', 'rgba(81, 87, 83, 0.5)'],\n                                                    data: [activePer, recoveredPer, deathsPer],\n                                                },\n                                            ],\n                                        }}\n\n                                        options={{\n                                            legend: { display: false },\n                                            title: { display: true, text: `Current state in ${countryName} (%)`, fontColor: \"white\" },\n                                            scales: {\n                                                yAxes: [{\n                                                    ticks: {\n                                                        beginAtZero: true,\n                                                        fontColor: 'white'\n                                                    },\n                                                }],\n                                                xAxes: [{\n                                                    ticks: {\n                                                        fontColor: 'white'\n                                                    },\n                                                }]\n                                            }\n                                        }}\n                                    />\n                                }\n                            </div>\n                            <div className=\"col-md-5 col-sm-12\" style={{ textAlign: \"justify\", color: \"white\" }}>\n                                <center>\n                                <table className=\"small-screen\">\n                                    <tr>\n                                        <td>\n                                            <strong>Total Confirmed Cases</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={confirmed} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Active Cases</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={active} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Recovered Cases</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={confirmed} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Critical Cases</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={critical} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Confirmed Cases Today</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={casesToday} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Cases/million</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={casesPerMillion} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr class=\"blank_row\">\n                                        <td colspan=\"3\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Total Deaths</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={deaths} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Deaths Today</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={deathsToday} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Deaths/million</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={deathsPerMillion} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr class=\"blank_row\">\n                                        <td colspan=\"3\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Total Tests</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={totalTests} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <strong>Tests/million</strong>\n                                        </td>\n                                        <td>\n                                            <strong>&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;</strong>\n                                        </td>\n                                        <td>\n                                            <CountUp start={0} end={testsPerMillion} duration={2} separator=\",\" />\n                                        </td>\n                                    </tr>\n                                </table>\n                                </center>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Landing\n\n","import React from 'react';\nimport Landing from './components/Landing'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Landing />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.6ce9074d.png\";"],"sourceRoot":""}